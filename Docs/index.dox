/**
@mainpage ECBUFR
@english

@section history History

Part of this library was created in 1996 at CMC during its participation
in the GEWEX Research Project (Global Energy Water Cycle Experiment).
The BUFR format was used as the medium for data exchange. A BUFR encoder
was needed for the conversion of MOLTS Data points (Model Output Local
Time Series) into BUFR messages. After the completion and release of the
encoder, no further work was done to complete the library, and only the
encoding part of the library was implemented. 
This was the case until summer 2007, when the project for conversion of
SCRIBE matrices to BUFR was started. Since there are no freely available
BUFR library that meet the requirements, decoding and template support
functions were added to the encoder library which was also updated with
latest updates of BUFR specifications.

@section overview Overview
This BUFR API library created for SCRIBE was written with the Open
Source model in mind, it is being developed using GNU tools for
packaging and uses a structure that follows the standard for release
under GPL. It is a general-purpose, template-oriented BUFR
encoding/decoding library that supports BUFR editions 2, 3, 4, and the
upcoming version 5. It supports most of the defined Table C operators,
and comes with example applications for encoding and decoding BUFR
datasets using templates (see accompanying Code Examples document).. 
It is written in C and has no dependency on any other library. It can be
installed very quickly and easily using ?.deb? files. It is simple to
use and requires moderate knowledge of BUFR to use it for decoding and
encoding BUFR message.

@section Overall Architecture
A general architecture is given in the diagram below as to the layers of
functions within the library. It ranges from ?low-level? worker-bee
routines that are generally not directly accessible to the developers to
high-level dataset and access functions that will be needed by all
users. Within this group of functions, we divide the API by
functionality; General-purpose, Decoding, Encoding, and Debugging. 

@image html LibraryCodeStructure.jpg
@image rtf LibraryCodeStructure.jpg

@section glossary Glossary
We have the defined the following terms that are frequently used in the
documentation that we should not assume to be self-evident:

- BUFR Message ? A BUFR format message between ?BUFR? and ?7777? in its
un-decoded form. This may be either as files or in sockets or pipes.
- Dataset ? The data payload of the BUFR message contained in section 4.
- Template ? A format of BUFR data elements meant to describe a common
sequence of events i.e. a synoptic observation or a vertical profile.
- Data Subset ? Instance of data specified by the Section 3 template. A Dataset may contain
multiple data subsets.
- Code Descriptor ? (F,X,Y) set which is a number which identifies a
single element.
- Code List ? List of code descriptors.
- Table A ? Contains the definition of the data type (e.g. Radar, surface
data ? land, etc.).
- Table B ? Contains the low-level single-element descriptors.
- Table C ? Contains the data description operators where F = 2 (from
(F,X,Y) e.g. 2 05 signify character that defines a field length.
- Table D ? Contains sequences of lower-level descriptors from B or from
- Tables C and D. In fact, a template can be defined as a Table D
descriptors.
- Definition File ? template files constructed from Table B manually via a
text editor using a standard format (example below from NC-AWOS):

@verbatim
#LOCAL_TABLEB=
#
BUFR_EDITION=4
#

001035,VALUE=53         #Originating center
001015                  #CYUL (8 character string length limitation for Ninjo?)
301001                  #Block and station number
301021                  #Station lat lon
010001                  #Station height (non-coordinate)
301011                  #Date
301012                  #Time
008021,VALUE=4          #Time significance = Forecast
004024                  #Time displacement in hours from reference time to validity time.
206015                  #Signify data width of following descriptor
007196                  #Elevation of model terrain
010004                  #Station pressure
010051                  #MSL pressure
001032                  #Generating application (36 GEM reg, 46 GE global)
117000                  #Delayed replication of 17 descriptors 70 time (57 eta levels converted to pressure
031001,VALUE=70         # + 12000 either 2 or 10 m agl + 11 pressure). Delayed replication future-proofs the template somewhat.
   008001                  #Level significance
   101000                  #Indicate if level is in pressure coordinates
   031000                  #Set to 1 if yes
      007004                  #Pressure level
   101000                  #Indicate if level is AGL coordinates (relative to model station height)
   031000                  #Set to 1 if yes. NOTE: 007004 and 007006 are mutually exclusive.
      007006                  #MAGL level
   102000                  #Indicate if we have the winds
   031000                  #Set to 1 in all cases except if height is 2m AGL
      011001                  #Wind speed
      011002                  #Wind direction
   103000                  #Indicate if we have the temp(s)
   031000                  #Set to 1 in all cases except if height is 10m AGL
      012101                  #Temperature
      012102,VALUE=MSNG       #Wet bulb
      012103                  #Dew point
   010009                  #Geopotential height (non-coordinate)
@endverbatim

@section installation Installation

See https://answers.launchpad.net/libecbufr/+faq/538

@section environment Environment

@note These are intended for the encoder/decoder applications, not the
core library

List of Environment Variables needed with sample values

<dl>
<dt> BUFR_TABLES 
<dd> This is used to locate the BUFR tables.
Thus your BUFR tables should be placed in a directory pointed to by this variable. This only apples
to CMC-format BUFR tables. If installing from packages, BUFR tables will be found in ...
</dl>

@todo where are the CMC tables found by default and where is the CMC table format documented?

@example encode_single_template.c
Encode a single message to a dataset using a Template

@example encode_multi.c
Encode multiple messages to a dataset using a Template

@example encode_multi_templates.c
Encode multiple messages to a dataset using multiple Templates

@example encode_hardcode.c
Encoding a message without using Templates

@example receive_tables.c
Receiving Local Table information in a message and Decoding

@example compress.c
Compressing BUFR Messages
@endenglish

@todo Should point to official WMO documentation.

@francais
@todo Main page should be translated
@endfrancais

@defgroup api High-level API functions
@defgroup encode Functions used during encoding
@defgroup decode Functions used during decoding
@defgroup debug Debug/diagnostics
@defgroup error Error handling
@defgroup tables Table management functions
@defgroup dataset Dealing with datasets, data subsets
@defgroup template Managing templates and sequences
@defgroup messages Functions for dealing with entire messages
@defgroup io Input/output
@defgroup descriptor Functions for getting/setting values
@defgroup data_structures Linked list/array interfaces
@defgroup internal Don't touch, don't ask
*/

