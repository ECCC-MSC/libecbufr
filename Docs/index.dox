/**
@mainpage ECBUFR
@english

@section history History

Part of this library was created in 1996 at CMC during its participation
in the GEWEX Research Project (Global Energy Water Cycle Experiment).
The BUFR format was used as the medium for data exchange. A BUFR encoder
was needed for the conversion of MOLTS Data points (Model Output Local
Time Series) into BUFR messages. After the completion and release of the
encoder, no further work was done to complete the library, and only the
encoding part of the library was implemented. 
This was the case until summer 2007, when the project for conversion of
SCRIBE matrices to BUFR was started. Since there are no freely available
BUFR library that meet the requirements, decoding and template support
functions were added to the encoder library which was also updated with
latest updates of BUFR specifications.

@section overview Overview
This BUFR API library created for SCRIBE was written with the Open
Source model in mind, it is being developed using GNU tools for
packaging and uses a structure that follows the standard for release
under GPL. It is a general-purpose, template-oriented BUFR
encoding/decoding library that supports BUFR editions 2, 3, 4, and the
upcoming version 5. It supports most of the defined Table C operators,
and comes with example applications for encoding and decoding BUFR
datasets using templates (see accompanying Code Examples document).. 
It is written in C and has no dependency on any other library. It can be
installed very quickly and easily using ?.deb? files. It is simple to
use and requires moderate knowledge of BUFR to use it for decoding and
encoding BUFR message.

@section Overall Architecture
A general architecture is given in the diagram below as to the layers of
functions within the library. It ranges from ?low-level? worker-bee
routines that are generally not directly accessible to the developers to
high-level dataset and access functions that will be needed by all
users. Within this group of functions, we divide the API by
functionality; General-purpose, Decoding, Encoding, and Debugging. 

@image html LibraryCodeStructure.jpg
@image rtf LibraryCodeStructure.jpg

@section glossary Glossary
We have the defined the following terms that are frequently used in the
documentation that we should not assume to be self-evident:

- BUFR Message ? A BUFR format message between ?BUFR? and ?7777? in its
un-decoded form. This may be either as files or in sockets or pipes.
- Dataset ? The data payload of the BUFR message contained in section 4.
- Template ? A format of BUFR data elements meant to describe a common
sequence of events i.e. a synoptic observation or a vertical profile.
- Data Subset ? Instance of data specified by the Section 3 template. A Dataset may contain
multiple data subsets.
- Code Descriptor ? (F,X,Y) set which is a number which identifies a
single element.
- Code List ? List of code descriptors.
- Table A ? Contains the definition of the data type (e.g. Radar, surface
data ? land, etc.).
- Table B ? Contains the low-level single-element descriptors.
- Table C ? Contains the data description operators where F = 2 (from
(F,X,Y) e.g. 2 05 signify character that defines a field length.
- Table D ? Contains sequences of lower-level descriptors from B or from
- Tables C and D. In fact, a template can be defined as a Table D
descriptors.
- Definition File ? template files constructed from Table B manually via a
text editor using a standard format (example below from NC-AWOS):

@verbatim
LOCAL_TABLEB=/users/dor/afsm/van/software/cmc/bufr_api-0.5.3/Examples/templates/nc-awos.tableb
#
LOCAL_TABLED=/users/dor/afsm/van/software/cmc/bufr_api-0.5.3/Examples/templates/nc-awos.tabled
#
BUFR_EDITION=4
#
# The following are valid BUFR codes, line-by-line (one line per code)
# Some can have values but this is not mandatory. The values would
become data # # once the template is loaded into the program.
001001
001002
001019
002001
002196
301011
301012
301021
007030
007031
001063
008079
301091
302001
010197
010052
010211
010210
302072
103003
004024
012112
004024,VALUE=-12
012101
004024,VALUE=0
302192
007032
302194
020003
004025
302076
004025
020252
102000
031001
005021
020023
005021
020253
302193
007032
002175
102004
004024
013227
007032
307013
033195
033196
033006
@endverbatim

@section structure Data Structure in BUFR
This describes the data structure of BUFR within the library. It
corresponds somewhat to the library code architecture.
@verbatim
0100090000037800000002001c00000000000400000003010800050000000b0
200000000050000000c02d80dd60d040000002e0118001c000000fb02100007
0000000000bc02000000000102022253797374656d000dd60d000092be00005
853110026e27706881425000c020000040000002d0100000400000002010100
1c000000fb029cff0000000000009001000000000440001254696d6573204e6
57720526f6d616e0000000000000000000000000000000000040000002d0101
00050000000902000000020d000000320a5a0000000100040000000000d80dd
80d20002d00040000002d010000030000000000
@endverbatim

@section installation Installation
This section will be deferred until tests with CMDS and ADS, It is noted
that ?.deb? packages have already been created, but that we wish to
resolve dependencies from other applications. The library name must also
be finalized.

@section environment Environment

@note These are intended for the encoder/decoder applications, not the
core library

List of Environment Variables needed with sample values
AFSISIO - CMOI operational implementation environment variable for
looking up where to install binaries and data files at CMC. If this is
absent (as in outside of CMC), we will look for the environment variable
?BUFR_TABLES?.
BUFR_TABLES ? This is used to locate the BUFR tables if ?AFSISIO? is not
coded. This is typical outside of CMC. Thus your CMC BUFR tables should
be placed in a directory pointed to by this variable. This only apples
to CMC-format BUFR tables.

@example encode_single_template.c
Encode a single message to a dataset using a Template

@example encode_multi.c
Encode multiple messages to a dataset using a Template

@example encode_multi_templates.c
Encode multiple messages to a dataset using multiple Templates

@example encode_hardcode.c
Encoding a message without using Templates

@example receive_tables.c
Receiving Local Table information in a message and Decoding

@example compress.c
Compressing BUFR Messages
@endenglish

@todo Should point to official WMO documentation.

@francais
@todo Main page should be translated
@endfrancais
*/

